// File name: ComplexArrays\Main.vm
// line 11: class Main { 
// line 11: function void main 
// line 13: ( ) { 
// line 13: var Array a , b , c ; 
function Main.main 3
push constant 10
call Array.new 1
pop local 0
// line 14: let a = Array . new ( 10 ) ; 
push constant 5
call Array.new 1
pop local 1
// line 16: let b = Array . new ( 5 ) ; 
push constant 1
call Array.new 1
pop local 2
// line 17: let c = Array . new ( 1 ) ; 
push local 0
push constant 3
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
// line 18: let a [ 3 ] = 2 ; 
push local 0
push constant 4
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
// line 20: let a [ 4 ] = 8 ; 
push local 0
push constant 5
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
// line 21: let a [ 5 ] = 4 ; 
push local 1
push local 0
push constant 3
add
pop pointer 1
push that 0
add
push local 0
push constant 3
add
pop pointer 1
push that 0
push constant 3
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
// line 22: let b [ a [ 3 ] ] = a [ 3 ] + 3 ; 
push local 0
push local 1
push local 0
push constant 3
add
pop pointer 1
push that 0
add
pop pointer 1
push that 0
add
push local 0
push local 0
push constant 5
add
pop pointer 1
push that 0
add
pop pointer 1
push that 0
push local 1
push constant 7
push local 0
push constant 3
add
pop pointer 1
push that 0
sub
push constant 2
call Main.double 1
sub
push constant 1
add
add
pop pointer 1
push that 0
call Math.multiply 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
// line 23: let a [ b [ a [ 3 ] ] ] = a [ a [ 5 ] ] * b [ ( ( 7 - a [ 3 ] ) - Main . double ( 2 ) ) + 1 ] ; 
push local 2
push constant 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
// line 24: let c [ 0 ] = null ; 
push local 2
push constant 0
add
pop pointer 1
push that 0
pop local 2
// line 25: let c = c [ 0 ] ; 
push constant 43
call String.new 1
push constant 84
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 49
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 120
call String.appendChar 2
push constant 112
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 53
call String.appendChar 2
push constant 59
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
// line 26: do Output . printString ( Test 1: expected result: 5; actual result:  ) ; 
push local 1
push constant 2
add
pop pointer 1
push that 0
call Output.printInt 1
pop temp 0
// line 28: do Output . printInt ( b [ 2 ] ) ; 
call Output.println 0
pop temp 0
// line 29: do Output . println ( ) ; 
push constant 44
call String.new 1
push constant 84
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 50
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 120
call String.appendChar 2
push constant 112
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 52
call String.appendChar 2
push constant 48
call String.appendChar 2
push constant 59
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
// line 30: do Output . printString ( Test 2: expected result: 40; actual result:  ) ; 
push local 0
push constant 5
add
pop pointer 1
push that 0
call Output.printInt 1
pop temp 0
// line 31: do Output . printInt ( a [ 5 ] ) ; 
call Output.println 0
pop temp 0
// line 32: do Output . println ( ) ; 
push constant 43
call String.new 1
push constant 84
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 51
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 120
call String.appendChar 2
push constant 112
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 48
call String.appendChar 2
push constant 59
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
// line 33: do Output . printString ( Test 3: expected result: 0; actual result:  ) ; 
push local 2
call Output.printInt 1
pop temp 0
// line 34: do Output . printInt ( c ) ; 
call Output.println 0
pop temp 0
// line 35: do Output . println ( ) ; 
push constant 0
pop local 2
// line 36: let c = null ; 
push local 2
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
// line 38: if ( c = null ) { 
push local 0
push constant 10
call Main.fill 2
pop temp 0
// line 40: do Main . fill ( a , 10 ) ; 
push local 0
push constant 3
add
pop pointer 1
push that 0
pop local 2
// line 41: let c = a [ 3 ] ; 
push local 2
push constant 1
add
push constant 33
pop temp 0
pop pointer 1
push temp 0
pop that 0
// line 42: let c [ 1 ] = 33 ; 
push local 0
push constant 7
add
pop pointer 1
push that 0
pop local 2
// line 43: let c = a [ 7 ] ; 
push local 2
push constant 1
add
push constant 77
pop temp 0
pop pointer 1
push temp 0
pop that 0
// line 44: let c [ 1 ] = 77 ; 
push local 0
push constant 3
add
pop pointer 1
push that 0
pop local 1
// line 45: let b = a [ 3 ] ; 
push local 1
push constant 1
add
push local 1
push constant 1
add
pop pointer 1
push that 0
push local 2
push constant 1
add
pop pointer 1
push that 0
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
// line 46: let b [ 1 ] = b [ 1 ] + c [ 1 ] ; 
// line 47: } 
label IF_FALSE0
push constant 44
call String.new 1
push constant 84
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 52
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 120
call String.appendChar 2
push constant 112
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 55
call String.appendChar 2
push constant 55
call String.appendChar 2
push constant 59
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
// line 48: do Output . printString ( Test 4: expected result: 77; actual result:  ) ; 
push local 2
push constant 1
add
pop pointer 1
push that 0
call Output.printInt 1
pop temp 0
// line 50: do Output . printInt ( c [ 1 ] ) ; 
call Output.println 0
pop temp 0
// line 51: do Output . println ( ) ; 
push constant 45
call String.new 1
push constant 84
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 53
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 120
call String.appendChar 2
push constant 112
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 49
call String.appendChar 2
push constant 49
call String.appendChar 2
push constant 48
call String.appendChar 2
push constant 59
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
// line 52: do Output . printString ( Test 5: expected result: 110; actual result:  ) ; 
push local 1
push constant 1
add
pop pointer 1
push that 0
call Output.printInt 1
pop temp 0
// line 53: do Output . printInt ( b [ 1 ] ) ; 
call Output.println 0
pop temp 0
// line 54: do Output . println ( ) ; 
push constant 0
return
// line 55: return ; 
// line 57: } function double 
// line 59: ( a ) { 
function Main.double 0
push argument 0
push constant 2
call Math.multiply 2
return
// line 59: return a * 2 ; 
// line 61: } function void fill 
// line 63: ( Array a , size ) { 
function Main.fill 0
label WHILE_EXP0
push argument 1
push constant 0
gt
not
if-goto WHILE_END0
push argument 1
push constant 1
sub
pop argument 1
// line 63: while ( size > 0 ) { let size = size - 1 ; 
push argument 0
push argument 1
add
push constant 3
call Array.new 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
// line 65: let a [ size ] = Array . new ( 3 ) ; 
goto WHILE_EXP0
label WHILE_END0
// line 66: } 
push constant 0
return
// line 67: return ; 
